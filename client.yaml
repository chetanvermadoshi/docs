openapi: 3.0.0
info:
  title: Doshi API
  version: 1.0.0
  description: |
    API documentation for the Doshi server. This API provides endpoints for client authentication
    and institution operations.

    The API is focused on client operations:
    - Client API (/client/*): For institution/client operations

tags:
  - name: Client
    description: Institution/client specific operations including authentication

servers:
  - url: https://production-doshi-api-8kq2.encr.app
    description: Production API server
  - url: https://sandbox-doshi-api-8kq2.encr.app
    description: Staging/Sandbox API server
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    ClientAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  headers:
    Access-Type:
      schema:
        type: string
        enum: [client]
      description: Type of access token being used

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    ClientAuthRequest:
      type: object
      properties:
        institutionId:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
      required:
        - institutionId
        - clientId
        - clientSecret

    ClientAuthResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: number
      required:
        - token
        - expiresIn

    Institution:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        description:
          type: string
        isActive:
          type: boolean
      required:
        - id
        - name
        - code

    UserStreak:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user
        currentStreak:
          type: integer
          description: The current streak count
        lastUpdated:
          type: string
          format: date-time
          description: The last time the streak was updated
        longestStreak:
          type: integer
          description: The longest streak achieved by the user
      required:
        - userId
        - currentStreak
        - lastUpdated
        - longestStreak

    UserBalance:
      type: object
      properties:
        doshBalance:
          type: number
          format: float
          description: User's Dosh balance
        emoji:
          type: string
          nullable: true
          description: User's emoji
        institutionId:
          type: string
          description: ID of the institution
        lifeBalance:
          type: number
          format: float
          description: User's Life balance
        userId:
          type: string
          description: ID of the user
        userName:
          type: string
          nullable: true
          description: Name of the user
        xpBalance:
          type: number
          format: float
          description: User's XP balance
        lifeUpdatedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when life balance was last updated
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the balance record was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the balance record was last updated
      required:
        - doshBalance
        - institutionId
        - lifeBalance
        - userId
        - xpBalance
        - createdAt
        - updatedAt

    CreateUserStreakRequest:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user
        currentStreak:
          type: integer
          description: Initial streak count (defaults to 1 if not provided)
          default: 1
        lastUpdated:
          type: string
          format: date-time
          description: The initial streak timestamp (defaults to current time if not provided)
      required:
        - userId

    UpdateUserStreakRequest:
      type: object
      properties:
        currentStreak:
          type: integer
          description: The new streak count
        lastUpdated:
          type: string
          format: date-time
          description: The new last updated timestamp
        longestStreak:
          type: integer
          description: The new longest streak (optional, will be auto-calculated if not provided)
      required:
        - currentStreak
        - lastUpdated

    Badge:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the badge
        name:
          type: string
          description: Name of the badge
        action:
          type: string
          description: Action required to earn the badge
        category:
          type: string
          description: Category of the badge
        description:
          type: string
          description: Detailed description of the badge
        imageUrl:
          type: string
          description: SVG image URL of the badge
        imageUrlPng:
          type: string
          description: PNG image URL of the badge
        maxDosh:
          type: integer
          description: Maximum Dosh reward possible
        minDosh:
          type: integer
          description: Minimum Dosh reward possible
        maxXP:
          type: integer
          description: Maximum XP reward possible
        minXP:
          type: integer
          description: Minimum XP reward possible
      required:
        - id
        - name
        - action
        - category
        - description
        - imageUrl
        - imageUrlPng
        - maxDosh
        - minDosh
        - maxXP
        - minXP

    BadgeReward:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the badge reward
        badge:
          $ref: "#/components/schemas/Badge"
        badgeAction:
          type: string
          description: Action that triggered the badge reward
        badgeId:
          type: string
          description: ID of the badge
        claimedAt:
          type: string
          format: date-time
          description: Timestamp when the badge was claimed
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the badge reward was created
        doshReward:
          type: integer
          description: Amount of Dosh rewarded
        institutionId:
          type: string
          description: ID of the institution
        metadata:
          type: object
          description: Additional metadata for the badge reward
          additionalProperties: true
        lessonId:
          type: string
          description: ID of the related lesson
        lessonSubmissionId:
          type: string
          description: ID of the lesson submission
        userId:
          type: string
          description: ID of the user who earned the badge
        xpReward:
          type: integer
          description: Amount of XP rewarded
      required:
        - id
        - badge
        - badgeId
        - claimedAt
        - createdAt
        - doshReward
        - institutionId
        - userId
        - xpReward

    Lesson:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the lesson
        name:
          type: string
          description: Name of the lesson
        pathId:
          type: string
          description: ID of the path this lesson belongs to
        levelId:
          type: string
          description: ID of the level this lesson belongs to
        isCustomLesson:
          type: boolean
          description: Whether this is a custom lesson
          default: false
      required:
        - id
        - name
        - pathId
        - levelId

    Level:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the level
        name:
          type: string
          description: Name of the level
        lessons:
          type: array
          description: List of lessons in this level
          items:
            $ref: "#/components/schemas/Lesson"
      required:
        - id
        - name
        - lessons

    Path:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the path
        name:
          type: string
          description: Name of the path
        emoji:
          type: string
          description: Emoji representation of the path
        description:
          type: string
          description: Description of the path
        imageUrl:
          type: string
          description: URL of the path's image
        levels:
          type: array
          description: List of levels in this path
          items:
            $ref: "#/components/schemas/Level"
      required:
        - id
        - name
        - emoji
        - description
        - levels

    SlideChoice:
      type: object
      properties:
        content:
          type: string
        isRightAnswer:
          type: boolean
      required:
        - content
        - isRightAnswer

    SlideMatchPair:
      type: object
      properties:
        term:
          type: string
        definition:
          type: string
      required:
        - term
        - definition

    SlideLottie:
      type: object
      properties:
        startFrame:
          type: number
          nullable: true
        url:
          type: string
        totalFrames:
          type: number
          nullable: true
        endFrame:
          type: number
          nullable: true
      required:
        - url

    SlideContent:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        lottieAsset:
          type: object
          nullable: true
          properties:
            startFrame:
              type: number
              nullable: true
            url:
              type: string
            totalFrames:
              type: number
              nullable: true
            endFrame:
              type: number
              nullable: true
          required:
            - url
        blurb:
          type: string
          nullable: true
        mediaUrl:
          type: string
          nullable: true
        isSurvey:
          type: boolean
          nullable: true
        choices:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/SlideChoice"
        matchPairs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/SlideMatchPair"
        value:
          oneOf:
            - type: number
            - type: boolean
        type:
          type: string
          enum:
            - video
            - text
            - choice
            - open
            - open_multiline
            - number
            - currency
            - match
            - bool
            - slider
      required:
        - id
        - content
        - type

    LessonResponse:
      type: object
      properties:
        id:
          type: string
        emoji:
          type: string
          nullable: true
        lessonTitle:
          type: string
        pathId:
          type: string
        levelId:
          type: string
        slides:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              content:
                type: string
              lottieAsset:
                type: object
                nullable: true
                properties:
                  startFrame:
                    type: number
                    nullable: true
                  url:
                    type: string
                  totalFrames:
                    type: number
                    nullable: true
                  endFrame:
                    type: number
                    nullable: true
                required:
                  - url
              blurb:
                type: string
                nullable: true
              mediaUrl:
                type: string
                nullable: true
              isSurvey:
                type: boolean
                nullable: true
              choices:
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    content:
                      type: string
                    isRightAnswer:
                      type: boolean
                  required:
                    - content
                    - isRightAnswer
              matchPairs:
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    term:
                      type: string
                    definition:
                      type: string
                  required:
                    - term
                    - definition
              value:
                nullable: true
                oneOf:
                  - type: number
                  - type: boolean
              type:
                type: string
                enum:
                  - video
                  - text
                  - choice
                  - open
                  - open_multiline
                  - number
                  - currency
                  - match
                  - bool
                  - slider
            required:
              - id
              - content
              - type
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              content:
                type: string
              lottieAsset:
                type: object
                nullable: true
                properties:
                  startFrame:
                    type: number
                    nullable: true
                  url:
                    type: string
                  totalFrames:
                    type: number
                    nullable: true
                  endFrame:
                    type: number
                    nullable: true
                required:
                  - url
              blurb:
                type: string
                nullable: true
              mediaUrl:
                type: string
                nullable: true
              isSurvey:
                type: boolean
                nullable: true
              choices:
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    content:
                      type: string
                    isRightAnswer:
                      type: boolean
                  required:
                    - content
                    - isRightAnswer
              matchPairs:
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    term:
                      type: string
                    definition:
                      type: string
                  required:
                    - term
                    - definition
              value:
                nullable: true
                oneOf:
                  - type: number
                  - type: boolean
              type:
                type: string
                enum:
                  - video
                  - text
                  - choice
                  - open
                  - open_multiline
                  - number
                  - currency
                  - match
                  - bool
                  - slider
            required:
              - id
              - content
              - type
        isInteractive:
          type: boolean
        lessonSubmissionId:
          type: string
          nullable: true
      required:
        - id
        - lessonTitle
        - pathId
        - levelId
        - slides
        - questions
        - isInteractive

paths:
  /client/auth/token:
    post:
      tags: [Client]
      summary: Get client authentication token
      description: |
        Authenticates an institution/client and provides an access token.
        Requires valid client credentials (client ID and secret).
        The token can be used to access client-specific endpoints and services.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientAuthRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientAuthResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Institution not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /client/users/{userId}/streak:
    get:
      tags: [Client]
      summary: Get user's streak information
      description: Retrieves the current streak information for a specific user
      security:
        - ClientAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to get streak information for
      responses:
        "200":
          description: Successfully retrieved user streak information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStreak"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags: [Client]
      summary: Update user's streak
      description: Updates the streak information for a specific user
      security:
        - ClientAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to update streak for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserStreakRequest"
      responses:
        "200":
          description: Streak updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStreak"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User streak not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /client/users/{userId}/badges:
    get:
      tags: [Client]
      summary: Get user's badge rewards
      description: Retrieves all badge rewards earned by a specific user
      security:
        - ClientAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to get badge rewards for
      responses:
        "200":
          description: Successfully retrieved user's badge rewards
          content:
            application/json:
              schema:
                type: object
                properties:
                  badges:
                    type: array
                    items:
                      $ref: "#/components/schemas/BadgeReward"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /client/users/{userId}/balance:
    get:
      tags: [Client]
      summary: Get user's balance information
      description: Retrieves the current balance information including Dosh, Life, and XP for a specific user
      security:
        - ClientAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to get balance information for
      responses:
        "200":
          description: Successfully retrieved user balance information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBalance"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /client/paths/{pathId}:
    get:
      tags: [Client]
      summary: Get path information
      description: Retrieves detailed information about a path including its levels and lessons
      security:
        - ClientAuth: []
      parameters:
        - name: pathId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the path to retrieve
      responses:
        "200":
          description: Successfully retrieved path information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Path"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Path not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /client/lessons/{lessonId}:
    get:
      tags: [Client]
      summary: Get detailed lesson information
      description: Retrieves detailed information about a lesson including its slides and questions
      security:
        - ClientAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the lesson to retrieve
      responses:
        "200":
          description: Successfully retrieved lesson information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LessonResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Lesson not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
